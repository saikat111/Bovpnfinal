{
  "openapi": "3.0.0",
  "info": {
    "title": "Bovpn API",
    "version": "1.0.0",
    "description": "APIs for user registration, login, profile management, subscription management, and server management"
  },
  "servers": [
    {
      "url": "http://localhost:5000"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Registers a new user with username, email, and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["username", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "username": { "type": "string" },
                        "email": { "type": "string" },
                        "subscriptionStatus": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "User already exists" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/users/google": {
      "get": {
        "summary": "Google authentication",
        "description": "Initiates the Google OAuth authentication process."
      }
    },
    "/users/google/callback": {
      "get": {
        "summary": "Google OAuth callback",
        "description": "Handles the callback after Google authentication.",
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "username": { "type": "string" },
                        "email": { "type": "string" },
                        "subscriptionStatus": { "type": "string" }
                      }
                    },
                    "token": { "type": "string" }
                  }
                }
              }
            },
            "400": { "description": "Authentication failed" }
          }
        }
      }
    },
    "/users/user": {
      "get": {
        "summary": "Get user profile",
        "description": "Fetches the profile of the authenticated user.",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "username": { "type": "string" },
                        "email": { "type": "string" },
                        "subscriptionStatus": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized access" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/subscriptions/plans": {
      "get": {
        "summary": "Get subscription plans",
        "description": "Fetches the available subscription plans (e.g., monthly, yearly, prices).",
        "responses": {
          "200": {
            "description": "List of subscription plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "planId": { "type": "string" },
                      "name": { "type": "string" },
                      "price": { "type": "number" },
                      "duration": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "summary": "Subscribe to a plan",
        "description": "Allows a user to subscribe to a plan by providing the plan ID and user ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "planId": { "type": "string" },
                  "userId": { "type": "string" }
                },
                "required": ["planId", "userId"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscriptionId": { "type": "string" },
                    "startDate": { "type": "string", "format": "date" },
                    "endDate": { "type": "string", "format": "date" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "delete": {
        "summary": "Unsubscribe from a plan",
        "description": "Allows a user to unsubscribe from a plan by providing the subscription ID.",
        "responses": {
          "200": {
            "description": "Successfully unsubscribed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully unsubscribed"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid subscription ID" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/subscriptions/{subscriptionId}/status": {
      "get": {
        "summary": "Get subscription status",
        "description": "Fetches the status of a subscription (e.g., active, inactive, expired).",
        "responses": {
          "200": {
            "description": "Subscription status fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "active" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid subscription ID" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/servers": {
      "get": {
        "summary": "Get list of all servers",
        "responses": {
          "200": {
            "description": "List of servers",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" },
                  "location": { "type": "string" },
                  "capacity": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverId}": {
      "get": {
        "summary": "Get details of a specific server",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Server details",
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "location": { "type": "string" },
                "capacity": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "/servers/{serverId}/connect": {
      "post": {
        "summary": "Connect to a specific server",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection details",
            "schema": {
              "type": "object",
              "properties": {
                "connectionId": { "type": "string" },
                "ipAddress": { "type": "string" },
                "port": { "type": "string" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
